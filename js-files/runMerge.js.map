{"version":3,"file":"runMerge.js","sourceRoot":"","sources":["../src/runMerge.ts"],"names":[],"mappings":";;AAAA,iEAAsD;AACtD,uDAA+C;AAC/C,yCAAgC;AAEhC,iCAAiC;AAEjC,SAAS,0BAA0B,CAAC,KAAa;IAC7C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;IAC7B,IAAI,QAAkB,CAAC;IACvB,IAAI,aAAuB,CAAC;IAE5B,QAAQ,GAAG,IAAI,2BAAQ,CAAC,EAAE,EAAE,IAAA,eAAG,EAAmB;QAC9C,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;KAChC,CAAC,CAAC,CAAC;IAEJ,aAAa,GAAG,IAAI,2BAAQ,CAAC,EAAE,EAAE,IAAA,eAAG,EAAmB;QACnD,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;KAChC,CAAC,CAAC,CAAC;IAEJ,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,KAAK,EAAE,CAAC,EAAE,EAAC;QACzB,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;KAChD;IAED,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,MAAM,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC;IACrD,wEAAwE;IACxE,wDAAwD;IACxD,OAAO,UAAU,CAAC;AACtB,CAAC;AAED,SAAS,uBAAuB,CAAC,KAAa;IAC1C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;IAC7B,IAAI,QAAkB,CAAC;IACvB,IAAI,aAAuB,CAAC;IAE5B,QAAQ,GAAG,IAAI,2BAAQ,CAAC,EAAE,EAAE,IAAA,eAAG,EAAmB;QAC9C,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;KAChC,CAAC,CAAC,CAAC;IAEJ,aAAa,GAAG,IAAI,2BAAQ,CAAC,EAAE,EAAE,IAAA,eAAG,EAAmB;QACnD,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;QAC7B,CAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAE;KAChC,CAAC,CAAC,CAAC;IAEJ,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,KAAK,EAAE,CAAC,EAAE,EAAC;QACzB,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;KAChD;IAED,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,MAAM,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC;IACrD,oEAAoE;IACpE,wDAAwD;IACxD,OAAO,UAAU,CAAC;AACtB,CAAC;AAED,SAAS,cAAc,CAAC,aAAqB,EAAE,OAAe;IAC1D,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,aAAa,EAAE,CAAC,EAAE,EAAC;QACjC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,GAAC,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,OAAO,GAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,IAAI,CAAC,OAAO,GAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;KAC5D;IACD,MAAM,KAAK,GAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAuB,CAAA;IACvD,MAAM,KAAK,GAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAuB,CAAA;IAEvD,OAAO,CAAC,GAAG,CAAC,yBAAyB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC;IAC5E,OAAO,CAAC,GAAG,CAAC,6BAA6B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC;AAEpF,CAAC;AAED,cAAc,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC","sourcesContent":["import { Bindings } from '@comunica/bindings-factory';\nimport { DataFactory } from 'rdf-data-factory';\nimport { Map } from 'immutable';\nimport type * as RDF from '@rdfjs/types';\nimport * as mathjs from 'mathjs';\n\nfunction opsPerSecondNonOverlapping(nRuns: number){\n    const DF = new DataFactory();\n    let bindings: Bindings;\n    let bindingsOther: Bindings;\n\n    bindings = new Bindings(DF, Map<string, RDF.Term>([\n        [ 'a', DF.namedNode('ex:a') ],\n        [ 'b', DF.namedNode('ex:b') ],\n        [ 'c', DF.namedNode('ex:c') ],\n        [ 'd', DF.namedNode('ex:d') ],\n        [ 'e', DF.namedNode('ex:e') ]\n    ]));\n\n    bindingsOther = new Bindings(DF, Map<string, RDF.Term>([\n        [ 'f', DF.namedNode('ex:f') ],\n        [ 'g', DF.namedNode('ex:g') ],\n        [ 'h', DF.namedNode('ex:h') ],\n        [ 'i', DF.namedNode('ex:i') ],\n    ]));\n\n    const start = process.hrtime();\n    for (let i = 0; i<nRuns; i++){\n        const result = bindings.merge(bindingsOther);\n    }\n\n    const end = process.hrtime(start);\n    const endSeconds = (end[0]+ end[1] / Math.pow(10,9));\n    // console.log(`Ops/second merge non overlapping: ${nRuns/endSeconds}`);\n    // console.log(`Total time overlapping: ${endSeconds}`);\n    return endSeconds;\n}\n\nfunction opsPerSecondOverlapping(nRuns: number){\n    const DF = new DataFactory();\n    let bindings: Bindings;\n    let bindingsOther: Bindings;\n\n    bindings = new Bindings(DF, Map<string, RDF.Term>([\n        [ 'a', DF.namedNode('ex:a') ],\n        [ 'b', DF.namedNode('ex:b') ],\n        [ 'c', DF.namedNode('ex:c') ],\n        [ 'd', DF.namedNode('ex:d') ],\n        [ 'e', DF.namedNode('ex:e') ]\n    ]));\n\n    bindingsOther = new Bindings(DF, Map<string, RDF.Term>([\n        [ 'd', DF.namedNode('ex:d') ],\n        [ 'a', DF.namedNode('ex:a') ],\n        [ 'b', DF.namedNode('ex:b') ],\n        [ 'f', DF.namedNode('ex:f') ],\n    ]));\n\n    const start = process.hrtime();\n    for (let i = 0; i<nRuns; i++){\n        const result = bindings.merge(bindingsOther);\n    }\n\n    const end = process.hrtime(start);\n    const endSeconds = (end[0]+ end[1] / Math.pow(10,9));\n    // console.log(`Ops/second merge overlapping: ${nRuns/endSeconds}`);\n    // console.log(`Total time overlapping: ${endSeconds}`);\n    return endSeconds;\n}\n\nfunction runExperiments(nReplications: number, nMerges: number){\n    const mean_1 = [];\n    const mean_2 = [];\n    for (let i = 0; i<nReplications; i++){\n        console.log(`Replication ${i+1}/${nReplications}`);\n        mean_1.push(nMerges/opsPerSecondOverlapping(nMerges));\n        mean_2.push(nMerges/opsPerSecondNonOverlapping(nMerges));\n    }\n    const std_1 = (mathjs.std(mean_1) as unknown) as number\n    const std_2 = (mathjs.std(mean_2) as unknown) as number\n\n    console.log(`Overlapping bindings: ${mathjs.mean(mean_1)} ops/s ${std_1} `);\n    console.log(`Non overlapping bindings: ${mathjs.mean(mean_2)} ops/s ${std_2} `);\n\n}\n\nrunExperiments(20, 1000000);\n\n\n\n\n\n"]}