{"version":3,"file":"RdfJsQuadSource.js","sourceRoot":"","sources":["RdfJsQuadSource.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport { MetadataValidationState } from '@comunica/metadata';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { wrap as wrapAsyncIterator } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport { someTermsNested, filterTermsNested, someTerms, uniqTerms, matchPatternComplete } from 'rdf-terms';\nimport type { IRdfJsSourceExtended } from './IRdfJsSourceExtended';\n\nconst DF = new DataFactory<RDF.BaseQuad>();\n\n/**\n * A quad source that wraps over an {@link RDF.Source}.\n */\nexport class RdfJsQuadSource implements IQuadSource {\n  private readonly source: IRdfJsSourceExtended;\n\n  public constructor(source: IRdfJsSourceExtended) {\n    this.source = source;\n  }\n\n  public static nullifyVariables(term: RDF.Term | undefined, quotedTripleFiltering: boolean): RDF.Term | undefined {\n    return !term || term.termType === 'Variable' || (!quotedTripleFiltering &&\n      term.termType === 'Quad' && someTermsNested(term, value => value.termType === 'Variable')) ?\n      undefined :\n      term;\n  }\n\n  public static hasDuplicateVariables(pattern: RDF.BaseQuad): boolean {\n    const variables = filterTermsNested(pattern, term => term.termType === 'Variable');\n    return variables.length > 1 && uniqTerms(variables).length < variables.length;\n  }\n\n  public match(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): AsyncIterator<RDF.Quad> {\n    // Check if the source supports quoted triple filtering\n    const quotedTripleFiltering = Boolean(this.source.features?.quotedTripleFiltering);\n\n    // Create an async iterator from the matched quad stream\n    const rawStream = this.source.match(\n      RdfJsQuadSource.nullifyVariables(subject, quotedTripleFiltering),\n      RdfJsQuadSource.nullifyVariables(predicate, quotedTripleFiltering),\n      RdfJsQuadSource.nullifyVariables(object, quotedTripleFiltering),\n      RdfJsQuadSource.nullifyVariables(graph, quotedTripleFiltering),\n    );\n    let it: AsyncIterator<RDF.Quad> = wrapAsyncIterator<RDF.Quad>(rawStream, { autoStart: false });\n\n    // Perform post-match-filtering if the source does not support quoted triple filtering,\n    // but we have a variable inside a quoted triple.\n    const pattern = DF.quad(subject, predicate, object, graph);\n    if (!quotedTripleFiltering && someTerms(pattern, term => term.termType === 'Quad')) {\n      it = it.filter(quad => matchPatternComplete(quad, pattern));\n    }\n\n    // Determine metadata\n    this.setMetadata(it, subject, predicate, object, graph)\n      .catch(error => it.destroy(error));\n\n    return it;\n  }\n\n  protected async setMetadata(\n    it: AsyncIterator<RDF.Quad>,\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n  ): Promise<void> {\n    // Check if the source supports quoted triple filtering\n    const quotedTripleFiltering = Boolean(this.source.features?.quotedTripleFiltering);\n\n    let cardinality: number;\n    if (this.source.countQuads) {\n      // If the source provides a dedicated method for determining cardinality, use that.\n      cardinality = await this.source.countQuads(\n        RdfJsQuadSource.nullifyVariables(subject, quotedTripleFiltering),\n        RdfJsQuadSource.nullifyVariables(predicate, quotedTripleFiltering),\n        RdfJsQuadSource.nullifyVariables(object, quotedTripleFiltering),\n        RdfJsQuadSource.nullifyVariables(graph, quotedTripleFiltering),\n      );\n    } else {\n      // Otherwise, fallback to a sub-optimal alternative where we just call match again to count the quads.\n      // WARNING: we can NOT reuse the original data stream here,\n      // because we may loose data elements due to things happening async.\n      let i = 0;\n      cardinality = await new Promise((resolve, reject) => {\n        const matches = this.source.match(\n          RdfJsQuadSource.nullifyVariables(subject, quotedTripleFiltering),\n          RdfJsQuadSource.nullifyVariables(predicate, quotedTripleFiltering),\n          RdfJsQuadSource.nullifyVariables(object, quotedTripleFiltering),\n          RdfJsQuadSource.nullifyVariables(graph, quotedTripleFiltering),\n        );\n        matches.on('error', reject);\n        matches.on('end', () => resolve(i));\n        matches.on('data', () => i++);\n      });\n    }\n\n    // If `match` would require filtering afterwards, our count will be an over-estimate.\n    const pattern = DF.quad(subject, predicate, object, graph);\n    const wouldRequirePostFiltering = (!quotedTripleFiltering &&\n        someTerms(pattern, term => term.termType === 'Quad')) ||\n      RdfJsQuadSource.hasDuplicateVariables(pattern);\n\n    it.setProperty('metadata', {\n      state: new MetadataValidationState(),\n      cardinality: { type: wouldRequirePostFiltering ? 'estimate' : 'exact', value: cardinality },\n      canContainUndefs: false,\n    });\n  }\n}\n"]}